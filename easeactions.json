{
  "version":"2.0",
  "metadata":{
    "apiVersion":"2017-06-07",
    "endpointPrefix":"ease",
    "jsonVersion":"1.1",
    "protocol":"json",
    "protocols":["json"],
    "serviceFullName":"Ironman Role Proxy Service",
    "serviceId":"ease",
    "signatureVersion":"v4",
    "targetPrefix":"IronManRoleProxy",
    "uid":"ironmanroleproxy-2017-06-07"
  },
  "operations":{
    "AddInstance":{
      "name":"AddInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddInstanceInput"},
      "output":{"shape":"AddInstanceOutput"},
      "errors":[
        {"shape":"InvalidInputException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"InternalServerException"},
        {"shape":"ConcurrentModificationException"},
        {"shape":"UnauthorizedOperationException"}
      ]
    },
    "AddLambda":{
      "name":"AddLambda",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddLambdaInput"},
      "output":{"shape":"AddLambdaOutput"},
      "errors":[
        {"shape":"ResourceNotFoundException"},
        {"shape":"InternalServerException"},
        {"shape":"ResourceInUseException"},
        {"shape":"ConcurrentModificationException"},
        {"shape":"UnauthorizedOperationException"}
      ]
    },
    "DeregisterInstanceRole":{
      "name":"DeregisterInstanceRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeregisterInstanceRoleInput"},
      "output":{"shape":"DeregisterInstanceRoleOutput"},
      "errors":[
        {"shape":"InvalidInputException"},
        {"shape":"UnauthorizedOperationException"},
        {"shape":"TooManyRequestsException"},
        {"shape":"ServiceUnavailableException"},
        {"shape":"ConcurrentModificationException"}
      ]
    },
    "DeregisterLambdaRole":{
      "name":"DeregisterLambdaRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeregisterLambdaRoleInput"},
      "output":{"shape":"DeregisterLambdaRoleOutput"},
      "errors":[
        {"shape":"InvalidInputException"},
        {"shape":"UnauthorizedOperationException"},
        {"shape":"TooManyRequestsException"},
        {"shape":"ServiceUnavailableException"},
        {"shape":"ConcurrentModificationException"}
      ]
    },
    "DeregisterTaskRole":{
      "name":"DeregisterTaskRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeregisterTaskRoleInput"},
      "output":{"shape":"DeregisterTaskRoleOutput"},
      "errors":[
        {"shape":"InvalidInputException"},
        {"shape":"UnauthorizedOperationException"},
        {"shape":"TooManyRequestsException"},
        {"shape":"ServiceUnavailableException"},
        {"shape":"ConcurrentModificationException"}
      ]
    },
    "GetInstanceCredentials":{
      "name":"GetInstanceCredentials",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetInstanceCredentialsInput"},
      "output":{"shape":"GetInstanceCredentialsOutput"},
      "errors":[
        {"shape":"InvalidInputException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"InternalServerException"},
        {"shape":"TooManyRequestsException"},
        {"shape":"ServiceUnavailableException"},
        {"shape":"UnauthorizedOperationException"}
      ]
    },
    "GetLambdaCredentials":{
      "name":"GetLambdaCredentials",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetLambdaCredentialsInput"},
      "output":{"shape":"GetLambdaCredentialsOutput"},
      "errors":[
        {"shape":"InvalidInputException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"InternalServerException"},
        {"shape":"TooManyRequestsException"},
        {"shape":"ServiceUnavailableException"},
        {"shape":"UnauthorizedOperationException"}
      ]
    },
    "GetTaskCredentials":{
      "name":"GetTaskCredentials",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetTaskCredentialsInput"},
      "output":{"shape":"GetTaskCredentialsOutput"},
      "errors":[
        {"shape":"InvalidInputException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"InternalServerException"},
        {"shape":"TooManyRequestsException"},
        {"shape":"ServiceUnavailableException"},
        {"shape":"UnauthorizedOperationException"}
      ]
    },
    "RegisterInstanceRole":{
      "name":"RegisterInstanceRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterInstanceRoleInput"},
      "output":{"shape":"RegisterInstanceRoleOutput"},
      "errors":[
        {"shape":"InvalidInputException"},
        {"shape":"ResourceInUseException"},
        {"shape":"TooManyRequestsException"},
        {"shape":"ServiceUnavailableException"},
        {"shape":"UnauthorizedOperationException"}
      ]
    },
    "RegisterLambdaRole":{
      "name":"RegisterLambdaRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterLambdaRoleInput"},
      "output":{"shape":"RegisterLambdaRoleOutput"},
      "errors":[
        {"shape":"InvalidInputException"},
        {"shape":"ResourceInUseException"},
        {"shape":"TooManyRequestsException"},
        {"shape":"ServiceUnavailableException"},
        {"shape":"UnauthorizedOperationException"}
      ]
    },
    "RegisterTaskRole":{
      "name":"RegisterTaskRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterTaskRoleInput"},
      "output":{"shape":"RegisterTaskRoleOutput"},
      "errors":[
        {"shape":"InvalidInputException"},
        {"shape":"ResourceInUseException"},
        {"shape":"TooManyRequestsException"},
        {"shape":"ServiceUnavailableException"},
        {"shape":"UnauthorizedOperationException"}
      ]
    },
    "RemoveInstance":{
      "name":"RemoveInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveInstanceInput"},
      "output":{"shape":"RemoveInstanceOutput"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ConcurrentModificationException"},
        {"shape":"UnauthorizedOperationException"},
        {"shape":"ResourceNotFoundException"}
      ]
    }
  },
  "shapes":{
    "AddInstanceInput":{
      "type":"structure",
      "required":[
        "ProxyToken",
        "Ec2InstanceId"
      ],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"},
        "Ec2InstanceId":{"shape":"Ec2InstanceId"}
      }
    },
    "AddInstanceOutput":{
      "type":"structure",
      "members":{
      }
    },
    "AddLambdaInput":{
      "type":"structure",
      "required":[
        "ProxyToken",
        "LambdaArn"
      ],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"},
        "LambdaArn":{"shape":"LambdaArn"}
      }
    },
    "AddLambdaOutput":{
      "type":"structure",
      "members":{
      }
    },
    "AwsAccountId":{
      "type":"string",
      "max":12,
      "min":0,
      "pattern":"\\d{12}"
    },
    "ConcurrentModificationException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "Credentials":{
      "type":"structure",
      "members":{
        "accessKeyId":{"shape":"String"},
        "secretAccessKey":{"shape":"String"},
        "sessionToken":{"shape":"String"},
        "expiration":{"shape":"Timestamp"}
      }
    },
    "DeregisterInstanceRoleInput":{
      "type":"structure",
      "required":["ProxyToken"],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"}
      }
    },
    "DeregisterInstanceRoleOutput":{
      "type":"structure",
      "members":{
      }
    },
    "DeregisterLambdaRoleInput":{
      "type":"structure",
      "required":["ProxyToken"],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"}
      }
    },
    "DeregisterLambdaRoleOutput":{
      "type":"structure",
      "members":{
      }
    },
    "DeregisterTaskRoleInput":{
      "type":"structure",
      "required":["ProxyToken"],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"}
      }
    },
    "DeregisterTaskRoleOutput":{
      "type":"structure",
      "members":{
      }
    },
    "Ec2InstanceId":{
      "type":"string",
      "documentation":"This is the globally unique identifier provided by EC2 to the instances spun up. This is guaranteed to be globally unique, across AWS accounts and regions - see https://sage.amazon.com/questions/23062",
      "max":64,
      "min":3
    },
    "Ec2InstanceIdList":{
      "type":"list",
      "member":{"shape":"Ec2InstanceId"},
      "documentation":"A list of EC2 Instance Ids",
      "max":512,
      "min":0
    },
    "GetInstanceCredentialsInput":{
      "type":"structure",
      "required":["ProxyToken"],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"}
      },
      "documentation":"In addition to the proxy token, this operation derives necessary ec2 instance information from the Auth header."
    },
    "GetInstanceCredentialsOutput":{
      "type":"structure",
      "members":{
        "Credentials":{"shape":"Credentials"}
      }
    },
    "GetLambdaCredentialsInput":{
      "type":"structure",
      "required":["ProxyToken"],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"}
      },
      "documentation":"In addition to the proxy token, this operation derives necessary lambda arn information from the Auth header."
    },
    "GetLambdaCredentialsOutput":{
      "type":"structure",
      "members":{
        "Credentials":{"shape":"Credentials"}
      }
    },
    "GetTaskCredentialsInput":{
      "type":"structure",
      "required":["ProxyToken"],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"}
      }
    },
    "GetTaskCredentialsOutput":{
      "type":"structure",
      "members":{
        "Credentials":{"shape":"Credentials"}
      }
    },
    "InternalServerException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidInputException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "KmsKeyId":{
      "type":"string",
      "max":2048,
      "min":1
    },
    "LambdaArn":{
      "type":"string",
      "max":2048,
      "min":1
    },
    "ProxyToken":{
      "type":"string",
      "documentation":"A token vended by the Control Plane to the Client that keys TaskRoles and InstanceRoles. Or, a token vended by an Upstream Platform to be passed to an UpstreamCredentialFunction.",
      "max":2048,
      "min":3
    },
    "RegisterInstanceRoleInput":{
      "type":"structure",
      "required":[
        "ProxyToken",
        "Ec2InstanceIds",
        "BaseRoleArn",
        "ScopeDownPolicy"
      ],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"},
        "Ec2InstanceIds":{"shape":"Ec2InstanceIdList"},
        "BaseRoleArn":{"shape":"RoleArn"},
        "ChainedCustomerRoleArn":{"shape":"RoleArn"},
        "ScopeDownPolicy":{"shape":"ScopeDownPolicy"},
        "UpstreamProxyToken":{"shape":"ProxyToken"},
        "UpstreamCredentialFunction":{"shape":"LambdaArn"},
        "UpstreamCredentialEncryptionKey":{"shape":"KmsKeyId"},
        "RoleSessionName":{"shape":"RoleSessionName"},
        "StsContext":{"shape":"StsContextMap"},
        "SourceArn":{"shape":"ResourceArn"},
        "SourceAccount":{"shape":"AwsAccountId"},
        "UpstreamSourceArn":{"shape":"ResourceArn"},
        "UpstreamSourceAccount":{"shape":"AwsAccountId"},
        "SourceIdentity":{"shape":"SourceIdentity"}
      }
    },
    "RegisterInstanceRoleOutput":{
      "type":"structure",
      "members":{
      }
    },
    "RegisterLambdaRoleInput":{
      "type":"structure",
      "required":[
        "ProxyToken",
        "BaseRoleArn"
      ],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"},
        "BaseRoleArn":{"shape":"RoleArn"},
        "ScopeDownPolicy":{"shape":"ScopeDownPolicy"},
        "LambdaArn":{"shape":"LambdaArn"},
        "RoleSessionName":{"shape":"RoleSessionName"},
        "StsContext":{"shape":"StsContextMap"},
        "SourceArn":{"shape":"ResourceArn"},
        "SourceAccount":{"shape":"AwsAccountId"}
      }
    },
    "RegisterLambdaRoleOutput":{
      "type":"structure",
      "members":{
      }
    },
    "RegisterTaskRoleInput":{
      "type":"structure",
      "required":[
        "ProxyToken",
        "RoleArn"
      ],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"},
        "RoleArn":{"shape":"RoleArn"},
        "ChainedCustomerRoleArn":{"shape":"RoleArn"},
        "ScopeDownPolicy":{"shape":"ScopeDownPolicy"},
        "UpstreamProxyToken":{"shape":"ProxyToken"},
        "UpstreamCredentialFunction":{"shape":"LambdaArn"},
        "UpstreamCredentialEncryptionKey":{"shape":"KmsKeyId"},
        "RoleSessionName":{"shape":"RoleSessionName"},
        "StsContext":{"shape":"StsContextMap"},
        "SourceArn":{"shape":"ResourceArn"},
        "SourceAccount":{"shape":"AwsAccountId"},
        "UpstreamSourceArn":{"shape":"ResourceArn"},
        "UpstreamSourceAccount":{"shape":"AwsAccountId"}
      }
    },
    "RegisterTaskRoleOutput":{
      "type":"structure",
      "members":{
      }
    },
    "RemoveInstanceInput":{
      "type":"structure",
      "required":[
        "ProxyToken",
        "Ec2InstanceId"
      ],
      "members":{
        "ProxyToken":{"shape":"ProxyToken"},
        "Ec2InstanceId":{"shape":"Ec2InstanceId"}
      }
    },
    "RemoveInstanceOutput":{
      "type":"structure",
      "members":{
      }
    },
    "ResourceArn":{
      "type":"string",
      "max":2048,
      "min":2,
      "pattern":"arn:aws[a-z-]*:[a-zA-Z0-9-]*:[a-z0-9-]*:\\d{12}:.+"
    },
    "ResourceInUseException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "RoleArn":{
      "type":"string",
      "max":2048,
      "min":20
    },
    "RoleSessionName":{
      "type":"string",
      "documentation":"If provided, Role Proxy Service will set the role session name in its calls made to STS AssumeRole. This session name will show up in Cloudtrail and be customer visible. It will be associated to all AWS APIs invoked using the session credentials. It has the same limits, as modeled in STS: https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html If not provided, Role Proxy Service will default to \"SageMaker\"",
      "max":64,
      "min":2,
      "pattern":"[\\w+=,.@-]*"
    },
    "ScopeDownPolicy":{
      "type":"string",
      "documentation":"An IAM policy in JSON format. The temporary security credentials that are returned by the Get* operation have the permissions that are allowed by both (the intersection of) the access policy of the role that is being assumed, and this policy.",
      "max":2048,
      "min":1
    },
    "ServiceUnavailableException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "SourceIdentity":{
      "type":"string",
      "documentation":"If provided, Role Proxy Service will set the source identity in its calls made to STS AssumeRole. See https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html. The limits of the SourceIdentity value are imposed by STS. See https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html",
      "max":64,
      "min":2,
      "pattern":"[\\w+=,.@-]*"
    },
    "String":{"type":"string"},
    "StsContextMap":{
      "type":"map",
      "key":{"shape":"StsContextMapKey"},
      "value":{"shape":"StsContextMapValue"}
    },
    "StsContextMapKey":{
      "type":"string",
      "max":256
    },
    "StsContextMapValue":{
      "type":"string",
      "max":256
    },
    "Timestamp":{"type":"timestamp"},
    "TooManyRequestsException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "UnauthorizedOperationException":{
      "type":"structure",
      "members":{
      },
      "documentation":"This exception is thrown if the caller invoking the operation is authorized by IAM to invoke the call, but isn't authorized to perform this action on the given resource. E.g., If accountA registers an instance and accountB tries to deregister that instance, this exception will be thrown.",
      "exception":true
    }
  },
  "documentation":"Role Proxy service serves as the central credentials provider for all ECS tasks and EC2 instance credentials for Hosting and EASE teams."
}
